import TIM from "tim-js-sdk";
import { TRTCDeviceInfo, TRTCScreenCaptureSourceInfo } from 'trtc-cloud-js-sdk';
import { TUIRoomInfo, TUIVideoStreamType, TUIVideoProfile, TUIAudioProfile, TUIRole, TUIRoomEvents, TUIRoomType, TUISeatInfo, TUIRequestCallback } from './types';
export * from './types';
export { TRTCDeviceType, TRTCDeviceState, TRTCDeviceInfo, TRTCVideoMirrorType, TRTCVideoRotation, TRTCVideoFillMode, TRTCVideoStreamType, TRTCScreenCaptureSourceInfo, TRTCScreenCaptureSourceType, Rect, TRTCVideoEncParam, TRTCVideoResolution, TRTCVideoResolutionMode } from 'trtc-cloud-js-sdk';
/**
 * TUIRoomEngine 提供了音视频房间的能力
 *
 * @class TUIRoomEngine
 */
declare class TUIRoomEngine {
    static className: string;
    private static isReady;
    private roomEngineWASM;
    private static userId;
    private static sdkAppId;
    private static Module;
    private logger;
    private roomId;
    static setModule(Module: any): void;
    static once(event: string, func: Function): void;
    constructor();
    /**
     * @private
     * 调用 TUIRoomEngineWASM 的静态方法
     */
    private static JSCallNativeFunctionPromise;
    /**
     * @private
     * 调用 TUIRoomEngineWASM 的异步方法
     * @param funcName
     * @param args
     */
    private JSCallNativeFunctionPromise;
    /**
     * 初始化 TUIRoomEngine
     *
     * @param {object} options
     * @param {number} options.sdkAppId sdkAppId <br>
     * 在 [实时音视频控制台](https://console.cloud.tencent.com/trtc) 单击 **应用管理** > **创建应用** 创建新应用之后，即可在 **应用信息** 中获取 sdkAppId 信息。
     * @param {string} options.userId 用户ID <br>
     * 建议限制长度为32字节，只允许包含大小写英文字母(a-zA-Z)、数字(0-9)及下划线和连词符。
     * @param {string} options.userSig userSig 签名 <br>
     * 计算 userSig 的方式请参考 [UserSig 相关](https://cloud.tencent.com/document/product/647/17275)。
     * @returns {Promise<void>}
     *
     * @example
     * // 初始化 TUIRoomEngine
     * await TUIRoomEngine.init({
     *  sdkAppId: 0,   // 填写您申请的 sdkAppId
     *  userId: '',    // 填写您业务对应的 userId
     *  userSig: '',   // 填写服务器或本地计算的 userSig
     * })
     */
    static init(options: {
        sdkAppId: number;
        userId: string;
        userSig: string;
        tim?: TIM;
    }): Promise<void>;
    /**
     * 设置当前用户基本信息（用户名、用户头像）
     *
     * @param {object} options
     * @param {string} options.userName 用户名，必填
     * @param {string} options.avatarUrl 用户头像，必填
     * @returns {Promise<void>}
     *
     * @example
     * // 设置当前用户用户名及用户头像
     * await TUIRoomEngine.setSelfInfo({
     *  userName: '',     // 填写您的新用户名
     *  avatarUrl: '',    // 填写您的新头像地址
     * })
     */
    static setSelfInfo(options: {
        userName: string;
        avatarUrl: string;
    }): Promise<void>;
    /**
     * 主持人创建房间，调用 createRoom 的用户为房间的所有者。创建房间时可设置房间 Id, 房间名称，以及房间是否允许加入用户开启音视频，发送消息等功能。
     *
     * @param {object} options
     * @param {string} options.roomId 房间 Id，必填, roomId 限制长度为64字节，且仅支持以下范围的字符集：<br>
     * - 大小写英文字母（a-zA-Z）
     * - 数字（0-9）
     * - 空格 ! # $ % & ( ) + - : ; < = . > ? @ [ ] ^ _ { } | ~ ,
     * @param {string} [options.name] 房间名称，必填，且不能为空字符串
     * @param {TUIRoomType} [options.roomType] 房间类型, 必填 <br>
     * 教育及会议场景设置房间类型为 TUIRoomType.kGroup，直播场景设置房间类型为 TUIRoomType.kOpen;
     * @param {number=} options.maxSeatCount 最大麦位数量 <br>
     * roomType 为 TUIRoomType.kGroup (教育及会议场景) 时，maxSeatCount 值不做限制；
     * roomType 为 TUIRoomType.kOpen (直播场景) 时，maxSeatCount 最大限制为 16；
     * @param {boolean=} [options.enableAudio=true] 是否允许加入用户打开音频
     * @param {boolean=} [options.enableVideo=true] 是否允许加入用户打开视频
     * @param {boolean=} [options.enableMessage=true] 是否允许加入用户发送消息
     * @param {boolean=} [options.enableSeatControl=false] 是否开启麦位控制
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.createRoom({
     *  roomId: '12345',   // 填入您的房间 Id, 注意房间 Id 要求为字符串类型
     *  name: 'Test Room',     // 填入您的房间名称, 房间名称默认为 roomId，最长 30 字节
     *  roomType: TUIRoomType.kGroup, // 设置房间类型为 TUIRoomType.kGroup 类型
     *  enableAudio: true,  // 设置是否允许加入用户打开音频
     *  enableVideo: true,  // 设置是否允许加入用户打开视频
     *  enableMessage: true,  // 设置是否允许加入用户发送消息
     * });
     */
    createRoom(options: {
        roomId: string;
        name: string;
        roomType: TUIRoomType;
        maxSeatCount?: number;
        enableAudio?: boolean;
        enableVideo?: boolean;
        enableMessage?: boolean;
        enableSeatControl?: boolean;
    }): Promise<void>;
    /**
     * 进入房间接口
     * @param {object} options
     * @param {string} options.roomId 房间号，字符串类型
     * @returns {Promise<TUIRoomInfo>} roomInfo
     * 该接口返回当前房间信息
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * const roomInfo = await roomEngine.enterRoom({
     *  roomId: '12345',
     * });
     */
    enterRoom(options: {
        roomId: string;
    }): Promise<TUIRoomInfo>;
    /**
     * 销毁房间接口，销毁房间必须由房间所有者发起，销毁房间之后房间不可进入
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.destroyRoom();
     */
    destroyRoom(): Promise<void>;
    /**
     * 离开房间接口，用户在执行 enterRoom 之后可通过 exitRoom 离开房间
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.exitRoom();
     */
    exitRoom(): Promise<void>;
    /**
     * 获取房间信息
     * @returns {Promise<TUIRoomInfo>} roomInfo
     * 该接口返回房间信息
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * const roomInfo = roomEngine.getRoomInfo();
     */
    getRoomInfo(): Promise<TUIRoomInfo>;
    /**
     * 更新房间信息, 只有房间所有者有权限更新房间信息
     */
    /**
     * 主持人更新房间信息，注意仅房间所有者有权限更新房间信息
     * @param {object} roomInfo 主持人更新房间的信息
     * @param {string} roomInfo.name 更新房间的名字
     * @param {true} roomInfo.enableVideo 更新房间是否允许其他用户开启摄像头
     * @param {true} roomInfo.enableAudio 更新房间是否允许其他用户开启麦克风
     * @param {true} roomInfo.enableMessage 更新房间是否允许其他用户发送消息
     * @param {true} roomInfo.enableSeatControl 更新房间是否进行麦位控制<br/>
     * 注意：enableSeatControl 设置为 true 时为举手发言模式，enableSeatControl 设置为 false 时为自由发言模式。
     * @param {true} roomInfo.maxSeatCount 更新房间麦位最大值<br/>
     * - roomType 为 TUIRoomType.kGroup (教育及会议场景) 时，maxSeatCount 值不做限制；
     * - roomType 为 TUIRoomType.kOpen (直播场景) 时，maxSeatCount 最大限制为 16；
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.createRoom({ roomId: '12345' });
     * await roomEngine.updateRoomInfo({ name: '新的名字', enableVideo: true });
     */
    updateRoomInfo(options: {
        name?: string;
        enableVideo?: boolean;
        enableAudio?: boolean;
        enableMessage?: boolean;
        enableSeatControl?: boolean;
        maxSeatCount?: number;
    }): Promise<void>;
    /**
     * 获取当前房间用户列表，注意该接口一次拉取的用户列表量最大为 100 个
     *
     * @param {object=} options 获取用户列表的参数
     * @param {number=} options.nextSequence 偏移量，默认从 0 开始拉取用户<br/>
     * @return {Promise<object>} result
     * result.nextSequence 下一次拉取群组用户的偏移量，如果 nextSequence 为 0 则代表 userList 全部拉下来了
     * result.userInfoList 本次拉取的 userList
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * let result;
     * const userList = [];
     * do {
     *  result = await roomEngine.getUserList();
     *  userList
     * } while (result.nextSequence !== 0)
     */
    getUserList(options?: {
        nextSequence?: Number;
    }): Promise<object>;
    /**
     * 获取用户的详细信息
     *
     * @param {object} options 获取用户信息的参数
     * @param {string} options.userId 根据 userId 获取该用户的详细信息
     * @returns Promise<TUIUserInfo> userInfo
     * 该接口返回指定用户的用户信息
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * const userInfo = await roomEngine.getUserInfo({
     *   userId: 'user_12345',
     * });
     */
    getUserInfo(options: {
        userId: string;
    }): Promise<any>;
    private JSCallNativeRequestFunctionPromise;
    /**
     * 麦下用户可调用 takeSeat 成为麦上用户，仅麦上用户可发布本地音视频流。<br/>
     * 当 roomInfo.enableSeatControl 为 true 时，普通用户调用 takeSeat 方法需要等待主持人/管理员的同意后成为麦上用户。<br/>
     * 当 roomInfo.enableSeatControl 为 false 时，普通用户调用 takeSeat 方法成功后即为麦上用户。<br/>
     * 主持人&管理员调用 takeSeat 成功后即为麦上用户。<br/>
     * 麦上用户的变更通过 TUIRoomEvents.onSeatListChanged 通知所有用户。<br/>
     * @param {object} options 获取麦位的参数
     * @param {number} options.seatIndex 麦位 index, 无麦位序号时设置为 -1
     * @param {number} options.timeout 超时时间。若 timeout 设置为 0，则无超时时间
     * @param {Function} options.requestCallback 请求回调，用来通知发起方请求被接受/拒绝/取消/超时/错误的回调
     * @returns {Promise<number>} <br/>
     * 当 roomIno.enableSeatControl 为 true，普通用户调用该接口时返回 requestId，普通用户可使用该 requestId 调用 cancelRequest 接口取消上麦请求。
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     *
     * // 情景一：主持人/管理员上麦
     * // 情景二：当 roomInfo.enableSeatControl 为 false 时，普通用户上麦
     * await roomEngine.takeSeat({
     *  seatIndex: -1,
     *  timeout: 0,
     * });
     *
     * // 情景三：当 roomInfo.enableSeatControl 为 true 时，普通用户上麦
     * const requestId = await roomEngine.instance?.takeSeat({
     *  seatIndex: -1,
     *  timeout: 0,
     *  requestCallback: ({ requestCallbackType, requestId, userId, code, message }) => {
     *    switch (requestCallbackType) {
     *      case TUIRequestCallbackType.kRequestAccepted:
     *        // 请求被接受
     *        break;
     *      case TUIRequestCallbackType.kRequestRejected:
     *        // 请求被拒绝
     *        break;
     *      case TUIRequestCallbackType.kRequestCancelled:
     *        // 请求已取消
     *        break;
     *      case TUIRequestCallbackType.kRequestTimeout:
     *        // 请求超时
     *        break;
     *      case TUIRequestCallbackType.kRequestError:
     *        // 请求错误
     *        break;
     *      default:
     *        break;
     *    }
     *  },
     * });
     */
    takeSeat(options: {
        seatIndex: number;
        timeout: number;
        requestCallback?: (callbackInfo: TUIRequestCallback) => void;
    }): Promise<number>;
    /**
     * 离开麦位
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.leaveSeat();
     */
    leaveSeat(): Promise<void>;
    /**
     * 获取麦位列表
     * @returns {Promise<TUISeatInfo[]>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * const seatList = await roomEngine.getSeatList();
     * ;
     */
    getSeatList(): Promise<TUISeatInfo[]>;
    /**
     * 请求远端用户打开摄像头
     * @param {object} options 请求远端用户打开摄像头的参数
     * @param {string} options.userId 用户 Id
     * @param {number} options.timeout 超时时间。若 timeout 设置为 0 ，则无超时时间
     * @param {Function} 请求回调，用来通知发起方请求被接受/拒绝/取消/超时/错误的回调
     * @return {Promise<number>} <br/>
     * 该接口返回 requestId，用户可使用该 requestId 调用 cancelRequest 接口取消请求
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * const requestId = roomEngine.requestToOpenRemoteCamera({
     *   userId: 'user_1234',
     *   timeout: 0,
     *   requestCallback: ({ requestCallbackType, requestId, userId, code, message }) => {
     *    switch (requestCallbackType) {
     *      case TUIRequestCallbackType.kRequestAccepted:
     *        // 请求被接受
     *        break;
     *      case TUIRequestCallbackType.kRequestRejected:
     *        // 请求被拒绝
     *        break;
     *      case TUIRequestCallbackType.kRequestCancelled:
     *        // 请求已取消
     *        break;
     *      case TUIRequestCallbackType.kRequestTimeout:
     *        // 请求超时
     *        break;
     *      case TUIRequestCallbackType.kRequestError:
     *        // 请求错误
     *        break;
     *      default:
     *        break;
     *    }
     *  },
     * });
     */
    requestToOpenRemoteCamera(options: {
        userId: string;
        timeout: number;
        requestCallback?: (callbackInfo: TUIRequestCallback) => void;
    }): Promise<number>;
    /**
     * 关闭远端用户摄像头
     *
     * @param {object} options 关闭远端用户摄像头的参数
     * @param {string} options.userId 用户 Id
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.closeRemoteCamera({
     *   userId: 'user_1234',
     * });
     */
    closeRemoteCamera(options: {
        userId: string;
    }): Promise<void>;
    /**
     * 请求远端用户打开麦克风
     *
     * @param {object} options 请求远端用户打开麦克风的参数
     * @param {string} options.userId 用户 Id
     * @param {number} options.timeout 超时时间，设置为 0 时，无超时时间
     * @param {Function} options.requestCallback 请求回调，用来通知发起方请求被接受/拒绝/取消/超时/错误的回调
     * @returns {Promise<number>} <br/>
     * 该接口返回 requestId，用户可使用该 requestId 调用 cancelRequest 接口取消请求
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * const requestId = await roomEngine.requestToOpenRemoteMicrophone({
     *   userId: 'user_1234',
     *   timeout: 0,
     *   requestCallback: ({ requestCallbackType, requestId, userId, code, message }) => {
     *    switch (requestCallbackType) {
     *      case TUIRequestCallbackType.kRequestAccepted:
     *        // 请求被接受
     *        break;
     *      case TUIRequestCallbackType.kRequestRejected:
     *        // 请求被拒绝
     *        break;
     *      case TUIRequestCallbackType.kRequestCancelled:
     *        // 请求已取消
     *        break;
     *      case TUIRequestCallbackType.kRequestTimeout:
     *        // 请求超时
     *        break;
     *      case TUIRequestCallbackType.kRequestError:
     *        // 请求错误
     *        break;
     *      default:
     *        break;
     *    }
     *  },
     * });
     */
    requestToOpenRemoteMicrophone(options: {
        userId: string;
        timeout: number;
        requestCallback?: (callbackInfo: TUIRequestCallback) => void;
    }): Promise<number>;
    /**
     * 关闭远端用户麦克风
     *
     * @param {object} options 关闭远端用户麦克风, 仅房间主持人和管理员可调用此方法
     * @param {string} options.userId 用户 Id
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.closeRemoteMicrophone({
     *   userId: 'user_1234',
     * });
     */
    closeRemoteMicrophone(options: {
        userId: string;
    }): Promise<void>;
    /**
     * 停止远端用户屏幕分享
     *
     * @param {object} options 停止远端用户屏幕分享, 仅房间主持人和管理员可调用此方法
     * @param {string} options.userId 用户 Id
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.stopRemoteScreenSharing({
     *   userId: 'user_1234',
     * });
     */
    stopRemoteScreenSharing(options: {
        userId: string;
    }): Promise<void>;
    /**
     * 邀请其他人上麦
     * @param {object} options 邀请其他人上麦的参数
     * @param {number} options.seatIndex  麦位 index
     * @param {string} options.userId  用户 Id
     * @param {number} options.timeout  超时时间，设置为 0 时，无超时时间
     * @param {Function} options.requestCallback 请求回调，用来通知发起方请求被接受/拒绝/取消/超时/错误的回调
     * @returns {Promise<number>} <br/>
     * 该接口返回 requestId，用户可使用该 requestId 调用 cancelRequest 接口取消请求
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * const requestId = await roomEngine.requestRemoteUserOnSeat({
     *   seatIndex: 0,
     *   userId: 'user_1234',
     *   timeout: 0,
     *   requestCallback: ({ requestCallbackType, requestId, userId, code, message }) => {
     *    switch (requestCallbackType) {
     *      case TUIRequestCallbackType.kRequestAccepted:
     *        // 请求被接受
     *        break;
     *      case TUIRequestCallbackType.kRequestRejected:
     *        // 请求被拒绝
     *        break;
     *      case TUIRequestCallbackType.kRequestCancelled:
     *        // 请求已取消
     *        break;
     *      case TUIRequestCallbackType.kRequestTimeout:
     *        // 请求超时
     *        break;
     *      case TUIRequestCallbackType.kRequestError:
     *        // 请求错误
     *        break;
     *      default:
     *        break;
     *    }
     *  },
     * });
     */
    requestRemoteUserOnSeat(options: {
        seatIndex: number;
        userId: string;
        timeout: number;
        requestCallback?: (callbackInfo: TUIRequestCallback) => void;
    }): Promise<number>;
    /**
     * 要求其他人下麦
     * @param {object} options 要求其他人下麦的参数
     * @param {number} options.seatIndex 麦位 index
     * @param {string} options.userId 用户 Id
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.kickRemoteUserOffSeat({
     *   seatIndex: 0,
     *   userId: 'user_1234',
     * });
     */
    kickRemoteUserOffSeat(options: {
        seatIndex: number;
        userId: string;
    }): Promise<void>;
    /**
     * 取消已经发出的请求
     * @param {object} options 取消已经发出请求的参数
     * @param {number} options.requestId 请求 Id
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.cancelRequest({
     *  requestId: 0,    // 请使用实际 requestId
     * });
     */
    cancelRequest(options: {
        requestId: number;
    }): Promise<void>;
    /**
     * 回复远端用户的请求
     * @param {object} options 回复远端用户的请求的参数
     * @param {number} options.requestId 请求 Id
     * @param {boolean} options.agree 是否同意
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     *
     * // 同意远端的请求
     * await roomEngine.responseRemoteRequest({
     *  requestId: 0,    // 请使用实际 requestId
     *  agree: true,
     * });
     *
     * // 拒绝远端的请求
     * await roomEngine.responseRemoteRequest({
     *  requestId: 0,    // 请使用实际 requestId
     *  agree: false,
     * });
     */
    responseRemoteRequest(options: {
        requestId: number;
        agree: boolean;
    }): Promise<any>;
    /**
     * 设置本地流的渲染位置
     * @param {object} options 设置本地流的渲染位置的参数
     * @param {TUIVideoStreamType} options.streamType 本地流类型
     * @param {string} options.view streamType 对应的流渲染的 div 元素的 id
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     *
     * // 设置本地摄像头流的播放区域为 id 是 'preview-camera' 的 div 元素
     * await roomEngine.setLocalRenderView({
     *  streamType: TUIVideoStreamType.kCameraStream,
     *  view: 'preview-camera',
     * });
     *
     * // 设置本地屏幕分享流的播放区域为 id 是 'preview-screen' 的 div 元素
     * await roomEngine.setLocalRenderView({
     *  streamType: TUIVideoStreamType.kScreenStream,
     *  view: 'preview-screen',
     * });
     */
    setLocalRenderView(options: {
        streamType: TUIVideoStreamType;
        view: string;
    }): Promise<void>;
    /**
     * 打开本地摄像头，开始视频流采集
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.setLocalRenderView({
     *  streamType: TUIVideoStreamType.kScreenStream,
     *  view: 'preview-screen',
     * });
     * await roomEngine.openLocalCamera();
     */
    openLocalCamera(): Promise<void>;
    /**
     * 关闭本地摄像头
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.closeLocalCamera();
     */
    closeLocalCamera(): Promise<void>;
    /**
     * 打开本地麦克风, 开始采集音频流
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.openLocalMicrophone();
     */
    openLocalMicrophone(): Promise<void>;
    /**
     * 关闭本地麦克风, 停止采集音频流
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.closeLocalMicrophone();
     */
    closeLocalMicrophone(): Promise<void>;
    /**
     * 设置本地视频的参数
     * @param {object} options 设置本地视频的参数
     * @param {TUIVideoProfile} options.videoProfile
     *
     * - 清晰 TUIVideoProfile.kLowDefinition <br/>
     * - 标清 TUIVideoProfile.kStandardDefinition <br/>
     * - 高清 TUIVideoProfile.kHighDefinition <br/>
     * - 超清 TUIVideoProfile.kSuperDefinition <br/>
     *
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.setLocalVideoProfile({
     *  videoProfile: TUIVideoProfile.kHighDefinition,
     * });
     */
    setLocalVideoProfile(options: {
        videoProfile: TUIVideoProfile;
    }): Promise<void>;
    /**
     * 设置本地音频的参数<br/>
     * 注意：该方法需要在 openLocalMicrophone 之前进行设置，否则不会生效。
     * @param {object} options 设置本地音频的参数
     * @param {TUIAudioProfile} options.audioProfile
     *
     * - TUIAudioProfile.kAudioProfileSpeech：语言模式；采样率：16k<br/>
     * - TUIAudioProfile.kAudioProfileDefault：标准模式（或者默认模式）；采样率：48k<br/>
     * - TUIAudioProfile.kAudioProfileMusic：音乐模式；采样率：48k
     *
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.setLocalAudioProfile({
     *  audioProfile: TUIAudioProfile.kAudioProfileSpeech,
     * });
     */
    setLocalAudioProfile(options: {
        audioProfile: TUIAudioProfile;
    }): Promise<void>;
    /**
     * 开始向远端推本地视频流
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.startPushLocalVideo();
     */
    startPushLocalVideo(): Promise<void>;
    /**
     * 停止向远端推本地视频流
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.startPushLocalVideo();
     */
    stopPushLocalVideo(): Promise<void>;
    /**
     * 开始向远端推本地音频流
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.startPushLocalAudio();
     */
    startPushLocalAudio(): Promise<void>;
    /**
     * 停止向远端推本地音频流
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.stopPushLocalAudio();
     */
    stopPushLocalAudio(): Promise<void>;
    /**
     * 设置远端流渲染的区域
     *
     * @param {object} options 设设置远端流渲染区域的参数
     * @param {string} options.userId 用户 Id
     * @param {TUIVideoStreamType} options.streamType 用户流类型
     * @param {string} options.view 播放远端用户流的 div 元素的 id
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     *
     * // 设置远端用户视频流在 id 为 'remote_preview_camera' 的区域播放
     * roomEngine.setRemoteRenderView({
     *  userId: 'user_1234',
     *  streamType: TUIVideoStreamType.kCameraStream,
     *  view: 'remote_preview_camera',
     * });
     *
     * // 设置远端用户屏幕分享流在 id 为 'remote_preview_screen' 的区域播放
     * roomEngine.setRemoteRenderView({
     *  userId: 'user_1234',
     *  streamType: TUIVideoStreamType.kScreenStream,
     *  view: 'remote_preview_screen',
     * });
     */
    setRemoteRenderView(options: {
        userId: string;
        streamType: TUIVideoStreamType;
        view: string;
    }): Promise<void>;
    /**
     * 开始播放远端用户视频流
     *
     * @param {object} options 开始播放远端用户视频流的参数
     * @param {string} options.userId 用户 Id
     * @param {TUIVideoStreamType} options.streamType 用户流类型
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.startPlayRemoteVideo({
     *  userId: 'user_1234',
     *  streamType: TUIVideoStreamType.kCameraStream,
     * });
     */
    startPlayRemoteVideo(options: {
        userId: string;
        streamType: TUIVideoStreamType;
    }): Promise<void>;
    /**
     * 停止播放远端用户视频流
     *
     * @param {object} options 停止播放远端用户视频流的参数
     * @param {string} options.userId 用户 Id
     * @param {TUIVideoStreamType} options.streamType 用户流类型<br/>
     *
     * - TUIVideoStreamType.kCameraStream 视频流<br/>
     * - TUIVideoStreamType.kScreenStream 屏幕分享流<br/>
     * - TUIVideoStreamType.kCameraStreamLow 低清视频流
     *
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.stopPlayRemoteVideo({
     *  userId: 'user_1234',
     *  streamType: TUIVideoStreamType.kCameraStream,
     * });
     */
    stopPlayRemoteVideo(options: {
        userId: string;
        streamType: TUIVideoStreamType;
    }): Promise<void>;
    /**
     * 改变用户的角色，仅主持人可调用该接口
     * @param {object} options 改变用户的角色，仅主持人可调用该接口的参数
     * @param {string} options.userId 用户 Id
     * @param {TUIRole} options.role 用户角色
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * // 将房间移交给用户 user_1234
     * await roomEngine.changeUserRole({
     *  userId: 'user_1234',
     *  role: TUIRole.kRoomOwner,
     * });
     */
    changeUserRole(options: {
        userId: string;
        role: TUIRole;
    }): Promise<void>;
    /**
     * 禁止远端用户发送消息，仅主持人和管理员可调用该接口
     * @param {object} options
     * @param {string} options.userId 远端用户 userId
     * @param {number} options.duration 禁止时长，单位秒。如设为 1000，则表示从现在起禁言该用户 1000 秒
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.muteRemoteUser({
     *  userId: 'user_1234',
     *  duration: 1000,
     * });
     */
    muteRemoteUser(options: {
        userId: string;
        duration: number;
    }): Promise<void>;
    /**
     * 取消禁止远端用户发送消息，仅主持人和管理员可调用该接口
     * @param {object} options
     * @param {string} options.userId 远端用户 userId
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.unmuteRemoteUser({
     *  userId: 'user_1234',
     * });
     */
    unmuteRemoteUser(options: {
        userId: string;
    }): Promise<void>;
    /**
     * 将用户踢出房间，仅主持人和管理员可调用该接口
     * @param {object} options
     * @param {string} options.userId 用户 Id
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.kickOutRemoteUser({
     *  userId: 'user_1234',
     * });
     */
    kickOutRemoteUser(options: {
        userId: string;
    }): Promise<void>;
    /**
     * 发送文本消息
     * @param {object} options
     * @param {string} options.messageText 文本消息内容
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.sendTextMessage({
     *  messageText: 'hello, everyone',
     * });
     */
    sendTextMessage(options: {
        messageText: string;
    }): Promise<void>;
    /**
     * 发送自定义消息
     * @param {object} options
     * @param {string} options.messageText 自定义消息内容
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.sendCustomMessage({
     *  messageText: '{ data:'', description: ''}',
     * });
     */
    sendCustomMessage(options: {
        messageText: string;
    }): Promise<void>;
    /**
     * 开始屏幕共享
     * @param {object=} options
     * @param {boolean=} [options.screenAudio=false] web 端屏幕共享是否可选共享系统声音, screenAudio 默认值为 false
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * // 设置本地屏幕分享流的播放区域为 id 是 'preview-screen' 的 div 元素, 可以不设置
     * await roomEngine.setLocalRenderView({
     *  streamType: TUIVideoStreamType.kScreenStream,
     *  view: 'preview-screen',
     * });
     * // example 1: 开始屏幕分享
     * await roomEngine.startScreenSharing();
     * // example 2: 开始屏幕分享(可采集系统音频)
     * await roomEngine.startScreenSharing({ screenAudio: true });
     */
    startScreenSharing(options?: {
        screenAudio?: boolean;
    }): Promise<void>;
    /**
     * 停止屏幕共享
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.stopScreenSharing();
     */
    stopScreenSharing(): Promise<void>;
    /**
     * 开始屏幕共享 Electron
     * @param {string} targetId 分享窗口 id, 可从 getScreenSharingTarget 获取
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.startScreenSharingElectron('xxx');
     *
     */
    startScreenSharingElectron(targetId: string): Promise<void>;
    /**
     * 停止屏幕共享 Electron
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.stopScreenSharingElectron();
     */
    stopScreenSharingElectron(): Promise<void>;
    /**
     * 获取屏幕分享列表 Electron
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * const screenList = await roomEngine.getScreenSharingTarget();
     */
    getScreenSharingTarget(): Promise<Array<TRTCScreenCaptureSourceInfo>>;
    /**
     * 切换屏幕分享窗口 Electron
     * @param {string} targetId 分享窗口 id, 可从 getScreenSharingTarget 获取
     *
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.selectScreenSharingTarget('xxx');
     */
    selectScreenSharingTarget(targetId: string): Promise<void>;
    /**
     * 监听 roomEngine 的事件
     * @param event TUIRoomEvents
     * @param func function
     * @returns {void}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * roomEngine.on(event, func);
     */
    on(event: TUIRoomEvents, func: Function): void;
    private setObserver;
    /**
     * 取消监听 roomEngine 的事件
     * @param event TUIRoomEvents
     * @param func function
     * @returns {void}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * roomEngine.off(event, func);
     */
    off(event: String, func: Function): void;
    private handleTrtcCloudBindEvent;
    /**
     * 获取摄像头设备列表<br>
     * @returns {Promise<TRTCDeviceInfo[]>} 摄像头列表
     * @example
     * const roomEngine = new TUIRoomEngine();
     * const cameralist = await roomEngine.getCameraDevicesList();
     * for (i = 0; i < cameralist.length; i++) {
     *    var camera = cameralist[i];
     *    console.info("camera deviceName: " + camera.deviceName + " deviceId:" + camera.deviceId);
     * }
     */
    getCameraDevicesList(): Promise<any>;
    /**
     * 获取麦克风设备列表<br>
     * @returns {Promise<TRTCDeviceInfo[]>} 麦克风列表
     * @example
     * const roomEngine = new TUIRoomEngine();
     * const micList = await roomEngine.getMicDevicesList();
     * for (i = 0; i < micList.length; i++) {
     *    var mic = micList[i];
     *    console.info("mic deviceName: " + mic.deviceName + " deviceId:" + mic.deviceId);
     * }
     */
    getMicDevicesList(): Promise<any>;
    /**
     * 获取扬声器设备列表<br>
     * @returns {Promise<TRTCDeviceInfo[]>} 扬声器列表
     * @example
     * const roomEngine = new TUIRoomEngine();
     * const speakerList = await roomEngine.getSpeakerDevicesList();
     * for (i = 0; i < speakerList.length; i++) {
     *    var speaker = speakerList[i];
     *    console.info("speaker deviceName: " + speaker.deviceName + " deviceId:" + speaker.deviceId);
     * }
     */
    getSpeakerDevicesList(): Promise<any>;
    /**
     * 设置要使用的摄像头设备<br>
     * @param {Object} options
     * @param {String} options.deviceId - 从 getCameraDevicesList 中得到的设备 ID
     * @returns {Promise<void>}
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.setCurrentCameraDevice({ deviceId: '' });
     */
    setCurrentCameraDevice(options: {
        deviceId: string;
    }): Promise<void>;
    /**
     * 设置要使用的麦克风设备<br>
     * @param {Object} options
     * @param {String} options.deviceId - 从 getMicDevicesList 中得到的设备 ID
     * @returns {Promise<void>}
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.setCurrentMicDevice({ deviceId: '' });
     */
    setCurrentMicDevice(options: {
        deviceId: string;
    }): Promise<void>;
    /**
     * 设置要使用的扬声器设备<br>
     * @param {Object} options
     * @param {String} options.deviceId - 从 getSpeakerDevicesList 中得到的设备 ID
     * @returns {Promise<void>}
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.setCurrentSpeakerDevice({ deviceId: '' });
     */
    setCurrentSpeakerDevice(options: {
        deviceId: string;
    }): Promise<void>;
    /**
     * 获取当前正在使用的摄像头设备
     * @returns {TRTCDeviceInfo} 设备信息，能获取设备 ID 和设备名称
     * @example
     * const roomEngine = new TUIRoomEngine();
     * const currentCameraDevice = roomEngine.getCurrentCameraDevice();
     */
    getCurrentCameraDevice(): TRTCDeviceInfo;
    /**
     * 获取当前正在使用的麦克风设备
     * @returns {TRTCDeviceInfo} 设备信息，能获取设备 ID 和设备名称
     * @example
     * const roomEngine = new TUIRoomEngine();
     * const currentMicDevice = roomEngine.getCurrentMicDevice();
     */
    getCurrentMicDevice(): TRTCDeviceInfo;
    /**
     * 获取当前正在使用的扬声器设备
     * @returns {TRTCDeviceInfo} 设备信息，能获取设备 ID 和设备名称
     * @example
     * const roomEngine = new TUIRoomEngine();
     * const currentSpeakerDevice = roomEngine.getCurrentSpeakerDevice();
     */
    getCurrentSpeakerDevice(): TRTCDeviceInfo;
    /**
     * 开始进行摄像头测试
     * @param {string} view 显示摄像头测试的视频区域, 传入的 view 为承载预览画面 div 元素的 id
     * @returns {Promise<void>}
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.startCameraDeviceTest({ view: 'test-preview' });
     */
    startCameraDeviceTest(options: {
        view: string;
    }): Promise<void>;
    /**
     * 停止摄像头测试
     * @returns {void}
     * @example
     * const roomEngine = new TUIRoomEngine();
     * await roomEngine.stopCameraDeviceTest();
     */
    stopCameraDeviceTest(): Promise<void>;
    /**
     * 获取 trtcCloud 实例
     * @returns {TRTCCloud} trtcCloud
     * web 端 trtcCloud 能力请查看：https://web.sdk.qcloud.com/trtc/webrtc/trtcCloud/doc/TRTCCloud.html
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * const trtcCloud = roomEngine.getTRTCCloud();
     */
    getTRTCCloud(): any;
    /**
     * 获取 tim 实例
     * @returns {TIM} tim
     * web 端 tim 能力请查看：https://web.sdk.qcloud.com/im/doc/zh-cn/SDK.html
     *
     * @example
     * const roomEngine = new TUIRoomEngine();
     * const trtcCloud = roomEngine.getTIM();
     */
    getTIM(): any;
    destroy(): void;
}
export default TUIRoomEngine;
